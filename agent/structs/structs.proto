syntax = "proto3";

package structs;

import "google/protobuf/duration.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;

option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// QueryMeta allows a query response to include potentially
// useful metadata about a query
message QueryMeta {
  // This is the index associated with the read
  uint64 Index = 1 [ (gogoproto.jsontag) = "" ];

  // If AllowStale is used, this is time elapsed since
  // last contact between the follower and leader. This
  // can be used to gauge staleness.
  google.protobuf.Duration LastContact = 2 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ""
  ];

  // Used to indicate if there is a known leader node
  bool KnownLeader = 3 [ (gogoproto.jsontag) = "" ];

  // Consistencylevel returns the consistency used to serve the query
  // Having `discovery_max_stale` on the agent can affect whether
  // the request was served by a leader.
  string ConsistencyLevel = 4 [ (gogoproto.jsontag) = "" ];
}

// QueryOptions is used to specify various flags for read queries
message QueryOptions {
  // Token is the ACL token ID. If not provided, the 'anonymous'
  // token is assumed for backwards compatibility.
  string Token = 1;

  // If set, wait until query exceeds given index. Must be provided
  // with MaxQueryTime.
  uint64 MinQueryIndex = 2;

  // Provided with MinQueryIndex to wait for change.
  google.protobuf.Duration MaxQueryTime = 3
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // If set, any follower can service the request. Results
  // may be arbitrarily stale.
  bool AllowStale = 4;

  // If set, the leader must verify leadership prior to
  // servicing the request. Prevents a stale read.
  bool RequireConsistent = 5;

  // If set, the local agent may respond with an arbitrarily stale locally
  // cached response. The semantics differ from AllowStale since the agent may
  // be entirely partitioned from the servers and still considered "healthy" by
  // operators. Stale responses from Servers are also arbitrarily stale, but can
  // provide additional bounds on the last contact time from the leader. It's
  // expected that servers that are partitioned are noticed and replaced in a
  // timely way by operators while the same may not be true for client agents.
  bool UseCache = 6;

  // If set and AllowStale is true, will try first a stale
  // read, and then will perform a consistent read if stale
  // read is older than value.
  google.protobuf.Duration MaxStaleDuration = 7
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // MaxAge limits how old a cached value will be returned if UseCache is true.
  // If there is a cached response that is older than the MaxAge, it is treated
  // as a cache miss and a new fetch invoked. If the fetch fails, the error is
  // returned. Clients that wish to allow for stale results on error can set
  // StaleIfError to a longer duration to change this behavior. It is ignored
  // if the endpoint supports background refresh caching. See
  // https://www.consul.io/api/index.html#agent-caching for more details.
  google.protobuf.Duration MaxAge = 8
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // MustRevalidate forces the agent to fetch a fresh version of a cached
  // resource or at least validate that the cached version is still fresh. It is
  // implied by either max-age=0 or must-revalidate Cache-Control headers. It
  // only makes sense when UseCache is true. We store it since MaxAge = 0 is the
  // default unset value.
  bool MustRevalidate = 9;

  // StaleIfError specifies how stale the client will accept a cached response
  // if the servers are unavailable to fetch a fresh one. Only makes sense when
  // UseCache is true and MaxAge is set to a lower, non-zero value. It is
  // ignored if the endpoint supports background refresh caching. See
  // https://www.consul.io/api/index.html#agent-caching for more details.
  google.protobuf.Duration StaleIfError = 10
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];

  // Filter specifies the go-bexpr filter expression to be used for
  // filtering the data prior to returning a response
  string Filter = 11;
}

// QuerySource is used to pass along information about the source node
// in queries so that we can adjust the response based on its network
// coordinates.
message QuerySource {
  string Datacenter = 1;
  string Segment = 2;
  string Node = 3;
  string Ip = 4;
}

// ServiceSpecificRequest is used to query about a specific service
message ServiceSpecificRequest {
  string Datacenter = 1;

  map<string, string> NodeMetaFilters = 2;

  string ServiceName = 3;
  // DEPRECATED (singular-service-tag) - remove this when backwards RPC compat
  // with 1.2.x is not required.
  string ServiceTag = 4;

  repeated string ServiceTags = 5;

  string ServiceAddress = 6;

  bool TagFilter = 7; // Controls tag filtering

  QuerySource Source = 8 [ (gogoproto.nullable) = false ];

  // Connect if true will only search for Connect-compatible services.
  bool Connect = 9;

  QueryOptions QueryOptions = 10
      [ (gogoproto.embed) = true, (gogoproto.nullable) = false ];
}

// RaftIndex is used to track the index used while creating
// or modifying a given struct type.
message RaftIndex {
  uint64 CreateIndex = 1 [ (gogoproto.moretags) = "bexpr:\"-\"" ];
  uint64 ModifyIndex = 2 [ (gogoproto.moretags) = "bexpr:\"-\"" ];
}

// Used to return information about a node
message Node {
  string ID = 1 [
    (gogoproto.casttype) = "github.com/hashicorp/consul/types.NodeID",
    (gogoproto.jsontag) = ""
  ];

  string Node = 2 [ (gogoproto.jsontag) = "" ];
  string Address = 3 [ (gogoproto.jsontag) = "" ];
  string Datacenter = 4 [ (gogoproto.jsontag) = "" ];
  map<string, string> TaggedAddresses = 5 [ (gogoproto.jsontag) = "" ];
  map<string, string> Meta = 6 [ (gogoproto.jsontag) = "" ];

  RaftIndex RaftIndex = 7 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "",
    (gogoproto.moretags) = "bexpr:\"-\""
  ];
}

// Weights represent the weight used by DNS for a given status
message Weights {
  int32 Passing = 1 [ (gogoproto.casttype) = "int", (gogoproto.jsontag) = "" ];
  int32 Warning = 2 [ (gogoproto.casttype) = "int", (gogoproto.jsontag) = "" ];
}

// CheckType is used to create either the CheckMonitor or the CheckTTL.
// The following types are supported: Script, HTTP, TCP, Docker, TTL, GRPC,
// Alias. Script,
// HTTP, Docker, TCP and GRPC all require Interval. Only one of the types may
// to be provided: TTL or Script/Interval or HTTP/Interval or TCP/Interval or
// Docker/Interval or GRPC/Interval or AliasService.
message CheckType {
  // fields already embedded in CheckDefinition
  // Note: CheckType.CheckID == CheckDefinition.ID

  string CheckID = 1 [
    (gogoproto.casttype) = "github.com/hashicorp/consul/types.CheckID",
    (gogoproto.jsontag) = ""
  ];
  string Name = 2 [ (gogoproto.jsontag) = "" ];
  string Status = 3 [ (gogoproto.jsontag) = "" ];
  string Notes = 4 [ (gogoproto.jsontag) = "" ];

  // fields copied to CheckDefinition
  // Update CheckDefinition when adding fields here

  repeated string ScriptArgs = 5 [ (gogoproto.jsontag) = "" ];
  string HTTP = 6 [ (gogoproto.jsontag) = "" ];
  bytes Header = 20 [
    (gogoproto.customtype) = "Headers",
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ""
  ];
  string Method = 7 [ (gogoproto.jsontag) = "" ];
  string TCP = 8 [ (gogoproto.jsontag) = "" ];
  google.protobuf.Duration Interval = 9 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ""
  ];

  string AliasNode = 10 [ (gogoproto.jsontag) = "" ];
  string AliasService = 11 [ (gogoproto.jsontag) = "" ];
  string DockerContainerID = 12 [ (gogoproto.jsontag) = "" ];
  string Shell = 13 [ (gogoproto.jsontag) = "" ];
  string GRPC = 14 [ (gogoproto.jsontag) = "" ];
  bool GRPCUseTLS = 15 [ (gogoproto.jsontag) = "" ];
  bool TLSSkipVerify = 16 [ (gogoproto.jsontag) = "" ];
  google.protobuf.Duration Timeout = 17 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ""
  ];
  google.protobuf.Duration TTL = 18 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ""
  ];

  // DeregisterCriticalServiceAfter, if >0, will cause the associated
  // service, if any, to be deregistered if this check is critical for
  // longer than this duration.
  google.protobuf.Duration DeregisterCriticalServiceAfter = 19 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ""
  ];
}

// ServiceDefinition is used to JSON decode the Service definitions. For
// documentation on specific fields see NodeService which is better documented.
message ServiceDefinition {
  string Kind = 1 [ (gogoproto.casttype) = "ServiceKind" ];
  string ID = 2;
  string Name = 3;
  repeated string Tags = 4;
  string Address = 5;
  map<string, string> Meta = 6;
  int32 Port = 7 [ (gogoproto.casttype) = "int" ];
  CheckType Check = 8 [ (gogoproto.nullable) = false ];
  repeated CheckType Checks = 9;
  Weights Weights = 10;
  string Token = 11;
  bool EnableTagOverride = 12;
  // DEPRECATED (ProxyDestination) - remove this when removing ProxyDestination
  // ProxyDestination is deprecated in favor of Proxy.DestinationServiceName
  string ProxyDestination = 13;

  // Proxy is the configuration set for Kind = connect-proxy. It is mandatory in
  // that case and an error to be set for any other kind. This config is part of
  // a proxy service definition and is distinct from but shares some fields with
  // the Connect.Proxy which configures a managed proxy as part of the actual
  // service's definition. This duplication is ugly but seemed better than the
  // alternative which was to re-use the same struct fields for both cases even
  // though the semantics are different and the non-shared fields make no sense
  // in the other case. ProxyConfig may be a more natural name here, but it's
  // confusing for the UX because one of the fields in ConnectProxyConfig is
  // also called just "Config"
  ConnectProxyConfig Proxy = 14;

  ServiceConnect Connect = 15;
}

message HealthCheckDefinition {
  string HTTP = 1 [ (gogoproto.jsontag) = ",omitempty" ];
  bool TLSSkipVerify = 2 [ (gogoproto.jsontag) = ",omitempty" ];
  bytes Header = 3 [
    (gogoproto.customtype) = "Headers",
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ",omitempty"
  ];
  string Method = 4 [ (gogoproto.jsontag) = ",omitempty" ];
  string TCP = 5 [ (gogoproto.jsontag) = ",omitempty" ];
  google.protobuf.Duration Interval = 6 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ",omitempty"
  ];
  google.protobuf.Duration Timeout = 7 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ",omitempty"
  ];
  google.protobuf.Duration DeregisterCriticalServiceAfter = 8 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ",omitempty"
  ];
}

// HealthCheck represents a single check on a given node
message HealthCheck {
  string Node = 1 [ (gogoproto.jsontag) = "" ];
  string CheckID = 2 [
    (gogoproto.casttype) = "github.com/hashicorp/consul/types.CheckID",
    (gogoproto.jsontag) = ""
  ];                                              // Unique per-node ID
  string Name = 3 [ (gogoproto.jsontag) = "" ];   // Check name
  string Status = 4 [ (gogoproto.jsontag) = "" ]; // The current check status
  string Notes = 5
      [ (gogoproto.jsontag) = "" ]; // Additional notes with the status
  string Output = 6 [ (gogoproto.jsontag) = "" ]; // Holds output of script runs
  string ServiceID = 7
      [ (gogoproto.jsontag) = "" ]; // optional associated service
  string ServiceName = 8 [ (gogoproto.jsontag) = "" ]; // optional service name
  repeated string ServiceTags = 9
      [ (gogoproto.jsontag) = "" ]; // optional service tags

  HealthCheckDefinition Definition = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "bexpr:\"-\"",
    (gogoproto.jsontag) = ""
  ];

  RaftIndex RaftIndex = 11 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "",
    (gogoproto.moretags) = "bexpr:\"-\""
  ];
}

// Upstream represents a single upstream dependency for a service or proxy. It
// describes the mechanism used to discover instances to communicate with (the
// Target) as well as any potential client configuration that may be useful such
// as load balancer options, timeouts etc.
message Upstream {
  option (gogoproto.stringer) = false;
  option (gogoproto.goproto_stringer) = false;

  // Destination fields are the required ones for determining what this upstream
  // points to. Depending on DestinationType some other fields below might
  // further restrict the set of instances allowable.
  //
  // DestinationType would be better as an int constant but even with custom
  // JSON marshallers it causes havoc with all the mapstructure mangling we do
  // on service definitions in various places.
  string DestinationType = 1;
  string DestinationNamespace = 2;
  string DestinationName = 3;

  // Datacenter that the service discovery request should be run against. Note
  // for prepared queries, the actual results might be from a different
  // datacenter.
  string Datacenter = 4;

  // LocalBindAddress is the ip address a side-car proxy should listen on for
  // traffic destined for this upstream service. Default if empty is 127.0.0.1.
  string LocalBindAddress = 5;

  // LocalBindPort is the ip address a side-car proxy should listen on for
  // traffic
  // destined for this upstream service. Required.
  int32 LocalBindPort = 6 [ (gogoproto.casttype) = "int" ];

  // Config is an opaque config that is specific to the proxy process being run.
  // It can be used to pass arbitrary configuration for this specific upstream
  // to the proxy.
  bytes Config = 7 [
    (gogoproto.customtype) = "UntypedMap",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "bexpr:\"-\""
  ];
}

// ConnectProxyConfig describes the configuration needed for any proxy managed
// or unmanaged. It describes a single logical service's listener and optionally
// upstreams and sidecar-related config for a single instance. To describe a
// centralized proxy that routed traffic for multiple services, a different one
// of these would be needed for each, sharing the same LogicalProxyID.
message ConnectProxyConfig {
  // DestinationServiceName is required and is the name of the service to accept
  // traffic for.
  string DestinationServiceName = 1;

  // DestinationServiceID is optional and should only be specified for
  // "side-car" style proxies where the proxy is in front of just a single
  // instance of the service. It should be set to the service ID of the instance
  // being represented which must be registered to the same agent. It's valid to
  // provide a service ID that does not yet exist to avoid timing issues when
  // bootstrapping a service with a proxy.
  string DestinationServiceID = 2;

  // LocalServiceAddress is the address of the local service instance. It is
  // optional and should only be specified for "side-car" style proxies. It will
  // default to 127.0.0.1 if the proxy is a "side-car" (DestinationServiceID is
  // set) but otherwise will be ignored.
  string LocalServiceAddress = 3;

  // LocalServicePort is the port of the local service instance. It is optional
  // and should only be specified for "side-car" style proxies. It will default
  // to the registered port for the instance if the proxy is a "side-car"
  // (DestinationServiceID is set) but otherwise will be ignored.
  int32 LocalServicePort = 4 [ (gogoproto.casttype) = "int" ];

  // Config is the arbitrary configuration data provided with the proxy
  // registration.
  bytes Config = 5 [
    (gogoproto.customtype) = "UntypedMap",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "bexpr:\"-\"",
    (gogoproto.jsontag) = ",omitempty"
  ];

  // Upstreams describes any upstream dependencies the proxy instance should
  // setup.
  repeated Upstream Upstreams = 6
      [ (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty" ];
}

// ServiceDefinitionConnectProxy is the connect proxy config  within a service
// registration. Note this is duplicated in config.ServiceConnectProxy and needs
// to be kept in sync.
message ServiceDefinitionConnectProxy {
  repeated string Command = 1 [ (gogoproto.jsontag) = ",omitempty" ];
  string ExecMode = 2 [ (gogoproto.jsontag) = ",omitempty" ];
  bytes Config = 3 [
    (gogoproto.customtype) = "UntypedMap",
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = ",omitempty"
  ];
  repeated Upstream Upstreams = 4
      [ (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty" ];
}

// ServiceConnect are the shared Connect settings between all service
// definitions from the agent to the state store.
message ServiceConnect {
  // Native is true when this service can natively understand Connect.
  bool Native = 1;

  // Proxy configures a connect proxy instance for the service. This is
  // only used for agent service definitions and is invalid for non-agent
  // (catalog API) definitions.
  ServiceDefinitionConnectProxy Proxy = 2
      [ (gogoproto.moretags) = "bexpr:\"-\"" ];

  // SidecarService is a nested Service Definition to register at the same time.
  // It's purely a convenience mechanism to allow specifying a sidecar service
  // along with the application service definition. It's nested nature allows
  // all of the fields to be defaulted which can reduce the amount of
  // boilerplate needed to register a sidecar service separately, but the end
  // result is identical to just making a second service registration via any
  // other means.
  ServiceDefinition SidecarService = 3 [ (gogoproto.moretags) = "bexpr:\"-\"" ];
}

// CheckServiceNode is used to provide the node, its service
// definition, as well as a HealthCheck that is associated.
message CheckServiceNode {
  Node Node = 1 [ (gogoproto.jsontag) = "" ];
  NodeService Service = 2 [ (gogoproto.jsontag) = "" ];
  repeated HealthCheck Checks = 3 [ (gogoproto.jsontag) = "" ];
}

// NodeService is a service provided by a node
message NodeService {
  // Kind is the kind of service this is. Different kinds of services may
  // have differing validation, DNS behavior, etc. An empty kind will default
  // to the Default kind. See ServiceKind for the full list of kinds.
  string Kind = 1 [
    (gogoproto.casttype) = "ServiceKind",
    (gogoproto.jsontag) = ",omitempty"
  ];

  string ID = 2 [ (gogoproto.jsontag) = "" ];
  string Service = 3 [ (gogoproto.jsontag) = "" ];
  repeated string Tags = 4 [ (gogoproto.jsontag) = "" ];
  string Address = 5 [ (gogoproto.jsontag) = "" ];
  map<string, string> Meta = 6 [ (gogoproto.jsontag) = "" ];
  int32 Port = 7 [ (gogoproto.casttype) = "int", (gogoproto.jsontag) = "" ];
  Weights Weights = 8 [ (gogoproto.jsontag) = "" ];
  bool EnableTagOverride = 9 [ (gogoproto.jsontag) = "" ];

  // ProxyDestination is DEPRECATED in favor of Proxy.DestinationServiceName.
  // It's retained since this struct is used to parse input for
  // /catalog/register but nothing else internal should use it - once
  // request/config definitions are passes all internal uses of NodeService
  // should have this empty and use the Proxy.DestinationServiceNames field
  // below.
  //
  // It used to store the name of the service that this service is a Connect
  // proxy for. This is only valid if Kind is "connect-proxy". The destination
  // may be a service that isn't present in the catalog. This is expected and
  // allowed to allow for proxies to come up earlier than their target services.
  // DEPRECATED (ProxyDestination) - remove this when removing ProxyDestination
  string ProxyDestination = 10
      [ (gogoproto.moretags) = "bexpr:\"-\"", (gogoproto.jsontag) = "" ];

  // Proxy is the configuration set for Kind = connect-proxy. It is mandatory in
  // that case and an error to be set for any other kind. This config is part of
  // a proxy service definition and is distinct from but shares some fields with
  // the Connect.Proxy which configures a managed proxy as part of the actual
  // service's definition. This duplication is ugly but seemed better than the
  // alternative which was to re-use the same struct fields for both cases even
  // though the semantics are different and the non-shred fields make no sense
  // in the other case. ProxyConfig may be a more natural name here, but it's
  // confusing for the UX because one of the fields in ConnectProxyConfig is
  // also called just "Config"
  ConnectProxyConfig Proxy = 11 [ (gogoproto.nullable) = false ];

  // Connect are the Connect settings for a service. This is purposely NOT
  // a pointer so that we never have to nil-check this.
  ServiceConnect Connect = 12 [ (gogoproto.nullable) = false ];

  // LocallyRegisteredAsSidecar is private as it is only used by a local agent
  // state to track if the service was registered from a nested sidecar_service
  // block. We need to track that so we can know whether we need to deregister
  // it automatically too if it's removed from the service definition or if the
  // parent service is deregistered. Relying only on ID would cause us to
  // deregister regular services if they happen to be registered using the same
  // ID scheme as our sidecars do by default. We could use meta but that gets
  // unpleasant because we can't use the consul- prefix from an agent (reserved
  // for use internally but in practice that means within the state store or in
  // responses only), and it leaks the detail publicly which people might rely
  // on which is a bit unpleasant for something that is meant to be config-file
  // syntax sugar. Note this is not translated to ServiceNode and friends and
  // may not be set on a NodeService that isn't the one the agent registered and
  // keeps in it's local state. We never want this rendered in JSON as it's
  // internal only. Right now our agent endpoints return api structs which don't
  // include it but this is a safety net incase we change that or there is
  // somewhere this is used in API output.
  bool LocallyRegisteredAsSidecar = 13
      [ (gogoproto.jsontag) = "-", (gogoproto.moretags) = "bexpr:\"-\"" ];

  RaftIndex RaftIndex = 14 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "",
    (gogoproto.moretags) = "bexpr:\"-\""
  ];
}

message IndexedCheckServiceNodes {
  repeated CheckServiceNode Nodes = 1 [ (gogoproto.nullable) = false ];
  QueryMeta QueryMeta = 2
      [ (gogoproto.embed) = true, (gogoproto.nullable) = false ];
}

message ProtoHeaders { map<string, StringList> Headers = 1; }

message StringList { repeated string Values = 1; }