// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: health_endpoint.proto

package consul

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import structs "github.com/hashicorp/consul/agent/structs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	ServiceNodes(ctx context.Context, in *structs.ServiceSpecificRequest, opts ...grpc.CallOption) (*structs.IndexedCheckServiceNodes, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) ServiceNodes(ctx context.Context, in *structs.ServiceSpecificRequest, opts ...grpc.CallOption) (*structs.IndexedCheckServiceNodes, error) {
	out := new(structs.IndexedCheckServiceNodes)
	err := c.cc.Invoke(ctx, "/consul.Health/ServiceNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	ServiceNodes(context.Context, *structs.ServiceSpecificRequest) (*structs.IndexedCheckServiceNodes, error)
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_ServiceNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structs.ServiceSpecificRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).ServiceNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consul.Health/ServiceNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).ServiceNodes(ctx, req.(*structs.ServiceSpecificRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consul.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceNodes",
			Handler:    _Health_ServiceNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health_endpoint.proto",
}

func init() {
	proto.RegisterFile("health_endpoint.proto", fileDescriptor_health_endpoint_80f0504841c26ded)
}

var fileDescriptor_health_endpoint_80f0504841c26ded = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0x88, 0x4f, 0xcd, 0x4b, 0x29, 0xc8, 0xcf, 0xcc, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4b, 0xce, 0xcf, 0x2b, 0x2e, 0xcd, 0x91, 0x32, 0x4f, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x48, 0x2c, 0xce, 0xc8, 0x4c, 0xce, 0x2f, 0x2a, 0xd0,
	0x87, 0x48, 0xea, 0x27, 0xa6, 0xa7, 0xe6, 0x95, 0xe8, 0x17, 0x97, 0x14, 0x95, 0x26, 0x97, 0x14,
	0xc3, 0x68, 0x88, 0x01, 0x46, 0x71, 0x5c, 0x6c, 0x1e, 0x60, 0x93, 0x85, 0x42, 0xb8, 0x78, 0x82,
	0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0xfd, 0xf2, 0x53, 0x52, 0x8b, 0x85, 0xe4, 0xf5, 0x60, 0x2a,
	0xa1, 0xc2, 0xc1, 0x05, 0xa9, 0xc9, 0x99, 0x69, 0x99, 0xc9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x52, 0x8a, 0x70, 0x05, 0x9e, 0x79, 0x29, 0xa9, 0x15, 0xa9, 0x29, 0xce, 0x19, 0xa9, 0xc9,
	0xd9, 0xc8, 0x66, 0x28, 0x31, 0x38, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x2d, 0x36, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x85, 0x47, 0x76, 0x9d, 0xd2, 0x00, 0x00, 0x00,
}
